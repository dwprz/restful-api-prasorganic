// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(100)
  full_name     String    @db.VarChar(100)
  password      String?   @db.VarChar(100)
  role          UserRole  @default(USER)
  photo_profile String?   @db.VarChar(500)
  whatsapp      String?   @db.VarChar(20)
  refresh_token String?   @unique @db.VarChar(1000)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  cart          Cart[]
  addresses     Address[]
  orders        Order[]
  reviews       Review[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model Otp {
  email String @id @unique @db.VarChar(100)
  otp   String @db.VarChar(6)

  @@map("otp")
}

model Product {
  product_id   Int    @id @default(autoincrement())
  product_name String @unique @db.VarChar(100)
  image        String @db.VarChar(300)
  rating       Float? @db.Real
  sold         Int?   @db.Integer
  price        Int    @db.Integer
  stock        Int    @db.Integer

  length Int   @db.Integer
  width  Int   @db.Integer
  height Int   @db.Integer
  weight Float @db.Real

  description    String?             @db.Text
  is_top_product Boolean             @default(false) @db.Boolean
  created_at     DateTime            @default(now())
  updated_at     DateTime?           @updatedAt
  cart           Cart[]
  categories     CategoryOnProduct[]
  reviews        Review[]

  @@map("products")
}

model DeletedProduct {
  product_id   Int    @id @unique
  product_name String @unique @db.VarChar(100)
  image        String @db.VarChar(300)
  rating       Float? @db.Real
  sold         Int?   @db.Integer
  price        Int    @db.Integer
  stock        Int    @db.Integer

  length Int   @db.Integer
  width  Int   @db.Integer
  height Int   @db.Integer
  weight Float @db.Real

  description    String?                    @db.Text
  is_top_product Boolean                    @default(false) @db.Boolean
  created_at     DateTime                   @default(now())
  updated_at     DateTime?                  @updatedAt
  categories     CategoryOnDeletedProduct[]

  @@map("deleted_products")
}

model Category {
  category_id      Int                        @id @default(autoincrement())
  category_name    String                     @unique @db.VarChar(20)
  products         CategoryOnProduct[]
  deleted_products CategoryOnDeletedProduct[]

  @@map("categories")
}

model CategoryOnProduct {
  product_id  Int
  category_id Int
  product     Product  @relation(fields: [product_id], references: [product_id])
  category    Category @relation(fields: [category_id], references: [category_id])

  @@id([product_id, category_id])
  @@map("categories_on_products")
}

model CategoryOnDeletedProduct {
  product_id      Int
  category_id     Int
  deleted_product DeletedProduct @relation(fields: [product_id], references: [product_id])
  category        Category       @relation(fields: [category_id], references: [category_id])

  @@id([product_id, category_id])
  @@map("categories_on_deleted_products")
}

model Cart {
  cart_item_id      Int @id @default(autoincrement())
  user_id           Int
  product_id        Int
  total_gross_price Int @db.Integer
  quantity          Int @db.Integer

  product Product @relation(fields: [product_id], references: [product_id])
  user    User    @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, product_id])
  @@map("carts")
}

model Address {
  address_id    Int    @id @default(autoincrement())
  user_id       Int
  address_owner String @db.VarChar(100)

  street  String @db.VarChar(200)
  area_id Int    @db.Integer
  area    String @db.VarChar(100)
  lat     String @db.VarChar(100)
  lng     String @db.VarChar(100)

  suburb_id Int    @db.Integer
  suburb    String @db.VarChar(100)

  city_id Int    @db.Integer
  city    String @db.VarChar(100)

  province_id Int    @db.Integer
  province    String @db.VarChar(100)

  whatsapp        String  @db.VarChar(20)
  is_main_address Boolean @default(false) @db.Boolean

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  user       User      @relation(fields: [user_id], references: [user_id])

  @@map("addresses")
}

// order_id: dibuat pada awal transaksi menggunakan Midtrans. 
// order_id ini sebagai identifikasi unik untuk setiap transaksi yang 
// terjadi melalui sistem Midtrans.

// shipping_id: merujuk pada properti order_id yang diberikan oleh penyedia 
// jasa pengiriman Shipper. shipping_id ini dibuat setelah pesanan pengiriman
// (shipping order) dikonfirmasi ke pihak penyedia jasa pengiriman.

// Karena kolom order_id sudah ada, maka kolom untuk menyimpan ID dari penyedia
// jasa pengiriman dinamakan shipping_id untuk membedakan antara order_id dari 
// Midtrans dan ID yang diberikan oleh Shipper.

model Order {
  order_id     String      @id
  gross_amount Int         @db.Integer
  status       OrderStatus @default(PENDING_PAYMENT)

  shipping_id   String? @db.VarChar(100)
  courier       String  @db.VarChar(50)
  rate_id       Int     @db.Integer
  rate_name     String  @db.VarChar(50)
  rate_type     String  @db.VarChar(50)
  cod           Boolean @default(false) @db.Boolean
  use_insurance Boolean @default(false) @db.Boolean
  package_type  Int     @db.Integer

  payment_method    String? @db.VarChar(50)
  snap_token        String
  snap_redirect_url String

  user_id Int    @db.Integer
  email   String @db.VarChar(100)
  buyer   String @db.VarChar(100)

  length Int   @db.Integer
  width  Int   @db.Integer
  height Int   @db.Integer
  weight Float @db.Real

  address_owner String @db.VarChar(100)
  street        String @db.VarChar(200)
  area_id       Int    @db.Integer
  area          String @db.VarChar(100)
  lat           String @db.VarChar(100)
  lng           String @db.VarChar(100)
  suburb        String @db.VarChar(100)
  city          String @db.VarChar(100)
  province      String @db.VarChar(100)
  whatsapp      String @db.VarChar(20)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user User @relation(fields: [user_id], references: [user_id])

  products ProductOrder[]

  @@map("orders")
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
  REFUND_PROCESSING
  REFUND_COMPLETED
  RETURN_PROCESSING
  LOST_OR_DAMAGED
}

model ProductOrder {
  product_order_id  Int    @id @default(autoincrement())
  order_id          String
  product_id        Int    @db.Integer
  product_name      String @db.VarChar(100)
  image             String @db.VarChar(300)
  price             Int    @db.Integer
  quantity          Int    @db.Integer
  total_gross_price Int    @db.Integer
  order             Order  @relation(fields: [order_id], references: [order_id])

  @@map("products_orders")
}

model Review {
  user_id      Int
  product_id   Int      @unique
  rating       Int      @db.Integer
  review       String?  @db.Text
  is_highlight Boolean  @default(false) @db.Boolean
  created_at   DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [user_id])
  product Product @relation(fields: [product_id], references: [product_id])

  @@id([user_id, product_id])
  @@map("reviews")
}
