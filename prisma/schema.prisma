// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(100)
  full_name     String    @db.VarChar(100)
  password      String?   @db.VarChar(100)
  role          UserRole  @default(USER)
  photo_profile String?   @db.VarChar(500)
  whatsapp      String?   @db.VarChar(20)
  refresh_token String?   @unique @db.VarChar(1000)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  cart          Cart[]
  addresses     Address[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model Otp {
  email String @id @unique @db.VarChar(100)
  otp   String @db.VarChar(6)

  @@map("otp")
}

model Product {
  product_id   Int                 @id @default(autoincrement())
  product_name String              @unique @db.VarChar(100)
  image        String              @db.VarChar(300)
  rate         Int?                @db.Integer
  sold         Int?                @db.Integer
  price        Int                 @db.Integer
  stock        Int                 @db.Integer
  description  String?             @db.Text
  created_at   DateTime            @default(now())
  updated_at   DateTime?           @updatedAt
  cart         Cart[]
  categories   CategoryOnProduct[]

  @@map("products")
}

model DeletedProduct {
  product_id         Int                        @id@unique
  product_name       String                     @unique @db.VarChar(100)
  image              String                     @db.VarChar(300)
  rate               Int?                       @db.Integer
  sold               Int?                       @db.Integer
  price              Int                        @db.Integer
  stock              Int                        @db.Integer
  description        String?                    @db.Text
  created_at         DateTime                   @default(now())
  updated_at         DateTime?                  @updatedAt
  categories         CategoryOnDeletedProduct[]

  @@map("deleted_products")
}

model Category {
  category_id      Int                        @id @default(autoincrement())
  category_name    String                     @unique @db.VarChar(20)
  products         CategoryOnProduct[]
  deleted_products CategoryOnDeletedProduct[]

  @@map("categories")
}

model CategoryOnProduct {
  product_id  Int
  category_id Int
  product     Product  @relation(fields: [product_id], references: [product_id])
  category    Category @relation(fields: [category_id], references: [category_id])

  @@id([product_id, category_id])
  @@map("categories_on_products")
}

model CategoryOnDeletedProduct {
  product_id      Int
  category_id     Int
  deleted_product DeletedProduct @relation(fields: [product_id], references: [product_id])
  category        Category       @relation(fields: [category_id], references: [category_id])

  @@id([product_id, category_id])
  @@map("categories_on_deleted_products")
}

model Cart {
  cart_id      Int     @id @default(autoincrement())
  product_name String  @db.VarChar(100)
  image        String  @db.VarChar(300)
  quantity     Int     @db.Integer
  price        Int     @db.Integer
  total_price  Int     @db.Integer
  stock        Int     @db.Integer
  user_id      Int
  product_id   Int
  product      Product @relation(fields: [product_id], references: [product_id])
  user         User    @relation(fields: [user_id], references: [user_id])

  @@map("carts")
}

model Address {
  address_id      Int       @id @default(autoincrement())
  address_owner   String    @db.VarChar(100)
  street          String    @db.VarChar(200)
  subdistrict     String    @db.VarChar(100)
  district        String    @db.VarChar(100)
  province        String    @db.VarChar(100)
  country         String?   @db.VarChar(50)
  postal_code     String    @db.VarChar(10)
  whatsapp        String    @db.VarChar(20)
  user_id         Int
  is_main_address Boolean   @default(false) @db.Boolean
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  user            User      @relation(fields: [user_id], references: [user_id])

  @@map("addresses")
}

model Order {
  order_id       Int    @id @default(autoincrement())
  total_amount   Int    @db.Integer
  logistic       String @db.VarChar(50)
  payment_method String @db.VarChar(50)
  status         String @db.VarChar(20)

  user_id   Int    @db.Integer
  email     String @db.VarChar(100)
  full_name String @db.VarChar(100)

  address_owner String  @db.VarChar(100)
  street        String  @db.VarChar(200)
  subdistrict   String  @db.VarChar(100)
  district      String  @db.VarChar(100)
  province      String  @db.VarChar(100)
  country       String? @db.VarChar(50)
  postal_code   String  @db.VarChar(10)
  whatsapp      String  @db.VarChar(20)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  products ProductOrder[]

  @@map("orders")
}

model ProductOrder {
  product_order_history_id Int      @id @default(autoincrement())
  order_id                 Int
  product_id               Int      @db.Integer
  product_name             String   @db.VarChar(100)
  image                    String   @db.VarChar(300)
  price                    Int      @db.Integer
  quantity                 Int      @db.Integer
  total_price              Int      @db.Integer
  created_at               DateTime @default(now())
  order                    Order    @relation(fields: [order_id], references: [order_id])

  @@map("products_orders")
}
